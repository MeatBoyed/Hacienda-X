// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client{
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url = "postgres://postgres.llfhkqdenvzoutfuqglg:qdhnyqjT2Fxun0Zx@aws-0-eu-west-2.pooler.supabase.com:5432/postgres"
}

model User {
  user_id    Int       @id @default(autoincrement())
  username   String    @unique
  email      String    @unique
  password   String
  Subscription Subscription[]
  Property    Property[]
  Message     Message[]
  Analytics   Analytics[]
  Ad          Ad[]
  Invoice     Invoice[]
}


model Subscription {
  subscription_id Int      @id @default(autoincrement())
  user           User     @relation(fields: [user_id], references: [user_id])
  user_id        Int
  start_date     DateTime
  end_date       DateTime
  plan_type      String
  payment_status String
}

model Property {
  property_id  Int        @id @default(autoincrement())
  agent        User       @relation(fields: [agent_id], references: [user_id])
  agent_id     Int
  title        String
  description  String?
  price        Float?
  address      String
  city         String
  country      String
  bathrooms    Int?       // Number of bathrooms can create dropdown for user to select number
  rooms        Int?       // Number of rooms
  pool         Boolean   @default(false)
  images       PropertyImage[]
  latitude     Float?     // New latitude column
  longitude    Float?     // New longitude column
}


model PropertyImage {
  image_id        Int      @id @default(autoincrement())
  property        Property @relation(fields: [property_id], references: [property_id])
  property_id     Int
  image_url       String
  image_description String?
}

model Message {
  message_id     Int      @id @default(autoincrement())
  //sender         User     @relation(fields: [sender_id], references: [user_id])
  sender_id      Int
  receiver       User     @relation(fields: [receiver_id], references: [user_id])
  receiver_id    Int
  message_content String
  timestamp      DateTime @default(now())
}

model Analytics {
  analytics_id Int     @id @default(autoincrement())
  agent        User    @relation(fields: [agent_id], references: [user_id])
  agent_id     Int
  graph_type   String
  data_points  String
  timestamp    DateTime @default(now())
}

model Ad {
  ad_id          Int     @id @default(autoincrement())
  agent          User    @relation(fields: [agent_id], references: [user_id])
  agent_id       Int
  ad_title       String
  ad_content     String
  ad_type        String
  creation_date  DateTime
  expiration_date DateTime
}

model Invoice {
  invoice_id      Int     @id @default(autoincrement())
  agent           User    @relation(fields: [agent_id], references: [user_id])
  agent_id        Int
  invoice_date    DateTime
  invoice_amount  Float
  payment_status  String
  payment_date    DateTime?
}

model PropertyCategory {
  category_id         Int             @id @default(autoincrement())
  category_name       String
  //parent_category     PropertyCategory? @relation("ChildCategory", fields: [parent_category_id], references: [category_id])
  parent_category_id  Int?
}

model Language {
  language_id   Int     @id @default(autoincrement())
  language_name String
  language_code String
}


enum Role {
  agent
  user
}