// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client{
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url = "postgres://postgres.llfhkqdenvzoutfuqglg:qdhnyqjT2Fxun0Zx@aws-0-eu-west-2.pooler.supabase.com:5432/postgres"
}

model User {
  user_id      String      @id @default(cuid())
  username     String      @unique
  email        String      @unique
  password     String
  Subscription Subscription[]
  Property      Property[]
  Message       Message[]
  Analytics     Analytics[]
  Ad            Ad[]
  Invoice       Invoice[]
}

model Subscription {
  subscription_id Int         @id @default(autoincrement())
  user            User        @relation(fields: [user_id], references: [user_id])
  user_id         String      // Changed type to String with cuid() default
  start_date      DateTime
  end_date        DateTime
  plan_type       String
  payment_status  String
}

//Note at later stage save images with description as a .JSON file to the proeprty table.
model Property {
  property_id     String        @id @default(cuid())
  agent           User          @relation(fields: [agent_id], references: [user_id])
  agent_id        String        // Match the type of user_id in the User model
  title           String
  description     String?
  price           Float?
  address         Address       @relation(fields: [address_id], references: [address_id])
  address_id      String        // Added address_id field
  city            String
  country         String
  latitude        Float         // New latitude column
  longitude       Float         // New longitude column
  created_at      DateTime      @default(now())  // New field for creation time
  updated_at      DateTime      @updatedAt        // New field for update time
  is_public       Boolean       @default(true)    // Added "isPublic" field
  sold            Boolean       @default(false)   // Added "Sold" field
  bedrooms        Int?          // Changed from "rooms" to "bedrooms"
  pool            Boolean       @default(false)
  extra_features  String[]      // Added "Extra Features" field for agents
  // Add more core features as needed
}

model Address {
  address_id      String      @id @default(cuid())
  street          String
  city            String
  country         String
  latitude        Float?
  longitude       Float?
  properties      Property[]  // One-to-many relation with Property model
}




model Message {
  message_id     Int      @id @default(autoincrement())
  //sender         User     @relation(fields: [sender_id], references: [user_id])
  sender_id      Int
  receiver       User     @relation(fields: [receiver_id], references: [user_id])
  receiver_id    String
  message_content String
  timestamp      DateTime @default(now())
}

model Analytics {
  analytics_id Int     @id @default(autoincrement())
  agent        User    @relation(fields: [agent_id], references: [user_id])
  agent_id     String
  graph_type   String
  data_points  String
  timestamp    DateTime @default(now())
}

model Ad {
  ad_id          Int     @id @default(autoincrement())
  agent          User    @relation(fields: [agent_id], references: [user_id])
  agent_id       String
  ad_title       String
  ad_content     String
  ad_type        String
  creation_date  DateTime
  expiration_date DateTime
}

model Invoice {
  invoice_id      Int     @id @default(autoincrement())
  agent           User    @relation(fields: [agent_id], references: [user_id])
  agent_id        String
  invoice_date    DateTime
  invoice_amount  Float
  payment_status  String
  payment_date    DateTime?
}

model PropertyCategory {
  category_id         Int             @id @default(autoincrement())
  category_name       String
  //parent_category     PropertyCategory? @relation("ChildCategory", fields: [parent_category_id], references: [category_id])
  parent_category_id  Int?
}

model Language {
  language_id   Int     @id @default(autoincrement())
  language_name String
  language_code String
}


enum Role {
  agent
  user
}